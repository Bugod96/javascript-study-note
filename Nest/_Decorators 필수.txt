[서비스]
@Injectable: a decorator that marks a class as a provider. 컨트롤러에서 사용가능하도록 모듈에 주입 가능해짐.
: 특정 서비스를 꾸미고, 해당 서비스를 모듈의 providers로 주입. (Dependency Injection)
  => 컨트롤러에서 사용 가능. constructor에 인자로 설정하면 컨트롤러 내에서 사용 가능.
================================================================================
[엔티티 생성]
@Entity: 클래스를 TypeORM 측면의 엔티티로 설정.

@ObjectType: 클래스를 GraphQL 엔티티로 설정. GraphQL 스키마에 @ObjectType의 entity 생성. 
             : 상속하는 엔티티 & 상속받는 엔티티 양쪽에 @ObjectType 필요.
@InputType: MappedTypes를 통해 GraphQL 엔티티로 dto 생성하기 위해 필요.
          : 상속하는 GraphQL entity의 경우 isAbstract:true 옵션 필요.

isAbstract 옵션: GraphQL 스키마에는 포함시키지 말라는 의미. 동명의 스키마 생성 방지용.
               : 상속을 위해서만 해당 엔티티가 활용된다는 의미.

@InputType({ isAbstract: true })  
@ObjectType()  
@Entity()  
export class UserEntity extends CoreEntity { ~ }
================================================================================
[DTO]
@InputType: MappedTypes를 통해 엔티티로 dto 생성하기 위해 필요. (extends OmitType, extends PartialType 등)
          : 상속하는 GraphQL entity & 상속받는 dto 양쪽에 @InputType 필요.

cf) @ArgsType: Mapped Types를 통해 entity를 기반으로 dto 클래스 생성 불가. 직접 생성 필요.

@InputType()
export class EditProfileInputDto extends PartialType(
  PickType(UserEntity, ['email', 'password']),
) {}
================================================================================
[Resolver]
@Args(): 해당 Query/Mutation에서 인자로 DTO를 받을 수 있도록 설정.
       : @InputType로 생성된 DTO 사용하려면 인자로 문자열 설정 필수
       => Args("매개변수명") inputDto: InputDto

@Mutation() 
editProfile( 
  @Args('input') editProfileInput: EditProfileInputDto, 
): Promise<EditProfileOutputDto> { ~ }
================================================================================
