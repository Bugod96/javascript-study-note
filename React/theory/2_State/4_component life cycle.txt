컴포넌트 생명주기 메서드
- React가 컴포넌트를 생성, 변경, 제거하기 위해 자동으로 실행하는 메서드들.
- 컴포넌트 내부에서 활용하면 직접 컴포넌트의 흐름 통제 가능.

[핵심] 4가지만 사용.
render() : state의 데이터를 기반으로 html 코드를 return. 컴포넌트 생성시 실행 + setState 실행시 재실행.
componentDidMount() : 최초로 웹페이지가 로드되었을 때 render 직후 실행됨.
componentDidUpdate() : setState를 실행시, render 이후에 실행됨.
componentWillUnmount() : 컴포넌트가 DOM 상에서 제거될 때 실행됨.


=====================================================
=====================================================
Component를 생성하고, render하고, state를 변경하여 다시 update를 할 때마다 자동으로 호출되는 함수들이 존재함.
- Mounting : 컴포넌트가 태어나는 것. 즉 웹사이트의 스크린에 컴포넌트에 보여지게 될 때.
- Updating : setState로 state 변경했을 때. 컴포넌트가 업데이트되는 것.
- Unmounting : 컴포넌트가 죽는 것. (ex. 페이지가 바뀔 때, state를 사용해서 component 교체 등)

https://ko.reactjs.org/docs/react-component.html
-------------------------------------
[전체 흐름]
[1] Mounting
- constructor() : class를 생성될 때 호출되는 함수. (JS. not react)
- getDerivedStateFromProps() : (안 중요)
3. render() 
4. componentDidMount() : 컴포넌트가 최초로 render되었음을 알려주는 함수.

[2] Updating : setState를 실행할 때 자동으로 실행되는 함수들.
- getDerivedStateFromProps() : (안 중요)
- shouldComponentUpdate() : (안 중요) 컴포넌트가 업데이트 되어야할지 말지 결정하는 함수.
3. render()
- getSnapshotBeforeUpdate(): (안 중요) 
5. componentDidUpdate() : 업데이트 완료되었음을 알려주는 함수. render 실행 완료를 알려줌.

[3] Unmounting 
• componentWillUnmount() : 웹페이지 이동 등 컴포넌트가 죽을 때 호출되는 함수.

=====================================================
=====================================================
[App.js]
class App extends React.Component {
  state = {
    count: 0,
  };
  add = () => {
    this.setState((current) => ({ count: current.count + 1 }));
  };
  componentDidMount() {
    console.log("component rendering complete - componentDidMount");
  }
  componentDidUpdate() {
    console.log("component updated (setState & render) - componentDidUpdate");
  }
  componentWillUnmount() {
    console.log("component will die - componentWillUnmount");
  }
  render() {
    console.log("I'm rendering - render");
    return (
      <div>
        <h1>The number is {this.state.count}</h1>
        <button onClick={this.add}>Add</button>
      </div>
    );
  }
} 

// [1] Mounting : 컴포넌트 생성. 최초 웹사이트 로딩시.
I'm rendering - render
component rendered - componentDidMount

// [2] Updating : this.setState 실행시. 버튼을 눌러서 state의 데이터를 변경할 때마다. 
I'm rendering - render
component updated (setState & render) - componentDidUpdate
I'm rendering - render
component updated (setState & render) - componentDidUpdate

// [3] Unmounting : 페이지 이동 등 컴포넌트 제거될 때
component will die - componentWillUnmount
===================================================== 
===================================================== 
[실전] 로딩 기능 
- 처음에는 "Loading" 출력 (isLoading: true)
- 로딩 끝나면 componentDidMount 실행. 
  => setTimeout에 따라 3000ms(3초) 후 setState 실행하여 state 수정
  => "We are ready" 출력 (isLoading: false)

[App.js]
import React from "react"; 
class App extends React.Component {
  state = {
    isLoading: true,
    movies: [],       // default 값 지정하는 것이 good practice.
  };
  componentDidMount() {
    setTimeout(() => {
      this.setState({ isLoading: false });
    }, 3000);
  }                 // 최초로 컴포넌트가 render되었을 때 (Mounting)
  render() {
    const { isLoading } = this.state;
    return <div>{isLoading ? "Loading" : "We are ready"}</div>;
  }
}
export default App;

// this.state의 isLoading 값을 render에서 사용할 isLoading 변수의 값으로 사용. 
// isLoading이 참이면 "Loading" / 거짓이면 "We are ready" (ternary operator) 

===================================================== 