[핵심 개념 이해하기] 
<서버>
: 클라이언트의 요청에 대해 응답을 하는 주체. 
: 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 혹은 프로그램 
- 웹사이트 주소에 해당하는 컴퓨터(데이터베이스, html파일 등을 응답함)
- 구글/애플의 서버 (모바일 앱 설치 파일을 응답함)
- 특정 사용자를 차단하는 등 서버가 응답하지 않을 수도 있음

클라이언트: 서버에 요청을 보내는 주체. 
- 브라우저, 데스크톱 프로그램
- 플레이 스토어, 앱스토어 
- 서버도 다른 서버에 요청을 보내는 경우 클라이언트 역할을 하게 됨.

Node.js는 JS 프로그램이 서버로서 기능하기 위한 도구를 제공 => 서버 역할 수행 가능.

---------------------------------------
<자바스크립트 런타임>
"Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임입니다." (https://nodejs.org/ko/)

런타임: 특정 언어로 만든 프로그램들을 실행할 수 있는 환경.
---------
과거 웹 브라우저만 자바스크립트 런타임을 내장하고 있음
(즉, 오직 웹브라우저에서만 JS 프로그램을 실행할 수 있었음)

지금은 Node.js 덕분에 다양한 자바스크립트 프로그램을 컴퓨터에서 실행 가능
즉, Node.js는 일종의 자바스크립트 실행 도구
물론 서버 애플리케이션을 실행하는 데 제일 많이 사용됨. 
---------
[Node.js Core Library]
 [Node.js Bindings]
   [V8]   [libuv]
                    
V8 엔진: 오픝소스, 자바스크립트 엔진. 구글이 크롬을 개발하는 데 사용.
libuv 라이브러리: 비동기 I/O. Node.js의 특성인 이벤트 기반, 논블로킹 I/O 모델을 구현함.
- JS 코드들을 Node.js가 알아서 V8엔진과 libuv 라이브러리에 연결해줌.
- 둘 다 C와 C++로 구현됨.

---------------------------------------
<이벤트 기반(event-driven)>
: 클릭, 네트워크 요청 등 이벤트가 발생할 때, 미리 지정해둔 작업을 수행하는 방식

[이벤트 기반 시스템]
1) 이벤트 리스너(event listener)에 콜백함수(callback finction)을 등록
  = 특정 이벤트가 발생할 때 무엇을 할지 미리 등록.
2) 시스템에서 이벤트 발생
3) 이벤트리스너에 등록된 콜백함수 호출
- 발생한 이벤트가 없거나 전부 다 처리했으면, 다음 이벤트 발생할 때까지 대기

이벤트 루프(event loop)
: 복수의 이벤트 동시 발생시, 어떤 순서로 콜백함수를 호출할지를 이벤트 루프가 판단함.

백그라운드(background)

태스크 큐(task queue) (= 콜백 큐)


호출스택(call stack)

---------------------------------------
<논 블로킹 I/O>

---------------------------------------
<싱글 스레드 모델>


