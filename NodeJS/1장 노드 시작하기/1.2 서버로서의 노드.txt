[서버로서의 노드]
자바스크립트, Node.js는 기본적으로 싱글스레드+논블로킹 모델 => Node 서버도 동일

Node.js는 개수는 많지만 크기는 작은 데이터를 실시간으로 주고받는 데 적합. (Real-time)
- 네트워크, 데이터베이스, 디스크 작업 등 I/O 작업에 특화.
- ex) 실시간 채팅 앱, 
      주식 차트, jason 데이터를 제공하는 API 서버

<서버에는 기본적으로 I/O 요청이 많이 발생>
: 논블로킹 방식으로 코드를 작성할 경우, 
  libuv 라이브러리를 사용하여 I/O 작업을 논 블로킹 방식으로 처리하게 됨.
: 스레드 하나만으로 많은 수의 I/O를 혼자서 감당 가능.

<CPU 부하가 큰 작업>
: 이미지, 비디오처리, 대규모 데이터 처리 등 CPU 부하가 큰 작업에는 적합하지 않음. (모든 코드를 스레드 하나에서 처리하게 되기 때문)
: 멀티 스레드 프로그래밍을 하더라도 C, C++, Rust, Go에 비해 속도가 많이 느림.
다만, AWS Lambda, Google Cloud Functions 등의 서비스를 사용하면 Node.js로 CPU를 많이 사용하는 작업을 처리 가능해짐.

<싱글스레드 프로그래밍>
- 멀티 스레드 방식에 비해 상대적으로 쉬움. 쉽게 입문 가능.
- 하나뿐인 스레드가 에러로 인해 멈추지 않도록 잘 관리해야 함.
  => 에러를 제대로 처리하지 못하면 서버 전체가 멈춰버리게 됨.

<웹 서버>
Node.js에 자체적으로 웹서버가 내장되어있음.
다만 서버규모가 커지면 nginx 등의 웹서버를 Node 서버와 연결해야 함.

<안정성, 보안성>
- NASA, 에어비앤비, 우버, 넷플릭스, 링크드인
- 페이팔, 월마트, 이베이 등 결제 시스템을 사용하는 대기업들
- 네이버, 카카오, 위메프, 야놀자 등이 Node.js 서버 사용함
---------------------------------
<Node.js의 장점>
- 멀티스레드 방식에 비해 적은 컴퓨터 자원 사용
- I/O 작업이 많은 서버로 적합
- 멀티스레드 방식보다 쉬움
- 웹서버가 내장됨
- Json 형식과 쉽게 호환됨. (JSON은 자바스크립트 형식이므로 Node.js에서 더 쉽게 처리 가능)
- 안정성, 보안성 측면도 이미 검증됨

<Node.js의 단점>
- 기본적으로 싱글스레드. 하나의 CPU 코어만 사용
- CPU 작업이 많은 서버로는 부적합함
- 하나뿐인 스레드가 멈추지 않도록 관리해야 함.
- 서버 규모가 커지게 되면 서버 관리가 어려워짐.
- 어중간한 성능

---------------------------------
넌적스(Nunjucks), 퍼그(Pug), EJS 등의 템플릿 엔진 활용
- 쇼핑몰, 블로그 등 정적인 콘텐츠를 제공하는 사이트들의 경우,
  기본적인 틀이 있고, 그 안의 내용물(텍스트, 이미지)만 조금씩 달라지게 됨.
- Node.js 자체가 이런 컨텐츠를 제공하는 데 특별한 장점을 지니지는 않음. 부적합하지도 않음. 

