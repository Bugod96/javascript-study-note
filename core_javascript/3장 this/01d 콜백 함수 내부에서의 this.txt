[콜백 함수 호출 시 그 함수 내부에서의 this]
콜백함수: 다른 함수(or 메서드)에게 자신의 제어권을 넘겨주는 함수
- 제어권을 넘겨받는 함수(메서드)에 따라 콜백 함수의 this 값은 다르게 지정됨.
- 기본적으로 함수이므로, 지정된 값이 없으면 콜백 함수의 this = 전역객체.

함수 A의 제어권을 다른 함수(or 메서드) B에게 넘겨주는 경우, A는 콜백 함수
- 콜백 함수 A는 제어권을 받은 함수 B의 내부 로직에 따라 실행됨. 
- 제어권을 받은 함수 B의 내부 로직에서 정한 규칙에 따라 함수 A의 this 값 결정됨.

콜백 함수에게 제어권을 넘겨받는 함수들의 대표적인 예시
- setTimeout 함수
  - setTimeout 함수의 콜백함수의 this는 전역함수
- forEach 메서드
  - array.forEach 메서드의 콜백함수의 this는 전역함수
- addEventListener 메서드
  - htmlElement.addEventListener 메서드의 콜백함수의 this는 htmlElement

--------------------------------------
setTimeout 함수
- setTimeout(함수A, time);
   [time]ms만큼 시간 지연 이후 콜백함수 A를 실행시키는 함수.

setTimeout(function() {console.log(this);}, 3000); 
// 3초 후 전역객체 출력: Window { ... }

콜백함수를 호출할 대상이 될 this 지정하지 않았음.
콜백함수 내부에서의 this는 전역객체를 참조하게 됨.

--------------------------
forEach 메서드
- array.forEach(함수A);
   array 배열의 각 요소를 하나씩 콜백함수 A의 첫번째 인자로 삼아 
   콜백함수 A를 실행시키는 함수. index=0부터 차례로 하나씩 꺼내어 배열의 요소만큼 반복 실행.
   
[1, 2, 3, 4, 5].forEach(function(x) {
    console.log(this, x);
}); 
// Window { ... } 1
// Window { ... } 2
// Window { ... } 3
// Window { ... } 4
// Window { ... } 5

콜백함수를 호출할 대상이 될 this 지정하지 않았음.
콜백함수 내부에서의 this는 전역객체를 참조하게 됨.

--------------------------
addEventListener 메서드
- 콜백함수를 호출할 때 자신의 this를 상속하도록 정의되어있음.
- htmlElement.addEventListener 메서드의 this는 htmlElement

document.body.innerHTML += '<button id="a">Click Me</button>';
document.body.querySelector('#a')
    .addEventListener('click', function(e){
        console.log(this, e);
    });
// 출력: <button id="a">Click Me</button>   MouseEvent { ... }

// 브라우저에 웹페이지에 버튼 생성. 
// 클릭하면 지정된 element와 클릭 이벤트에 관한 정보가 담긴 객체 출력됨.
// document.body.querySelector('#a').addEventListener(~,~)의 this 값은 
   document.body.querySelector('#a')이 됨. 즉, <button id="a">Click Me</button>