프로토타입 체인 (prototype chain)
: 어떤 데이터의 __proto__ 프로퍼티 내부에 __proto__ 프로퍼티가 연쇄적으로 이어진 것
: 프로토타입 체이닝 (prototype chaining): 프로토타입 체인을 따라가며 검색하는 것

배경지식: 모든 객체의 __proto__에는 Object.prototype이 연결되어있음.
=> ex) Array.prototype도 객체이므로 객체의 내부 구조(__proto__)가 그대로 존재.
=> ex) 배열.toString처럼 배열에서 Object.prototype의 메서드 사용 가능.

----------------------------------------------------------
배열의 __proto__ 내부에는 __proto__가 존재
  : 객체 내부의 __proto__와 동일한 내용

var arr = [1, 2];
arr.__proto__ == Array.prototype; // true
arr.__proto__.__proto__ == Object.prototype; // true

               [Object] --- [Object.prototype] 
              new |                   /
  [Array] --- [Array.prototype] (.__proto__)
new |             /
  [1,2]  (.__proto__)

-------------------------------
배열에서도 객체 메서드 사용 가능
- 별도의 작업 없이도 __proto__의 __proto__에 Object.prototype이 담겨 있음.

var arr = [1, 2];
arr.push(3); // 배열메서드
// arr(.__proto__).push(3);

arr.hasOwnProperty(2); // true   // 객체메서드
// arr(.__proto__)(.__proto__).hasOwnProperty(2);

----------------------------------------------------------
[프로토타입 체이닝]
인스턴스에서 특정 메서드에 접근하는 방식 
(1단계) instance.methodName 
(2단계) instance.__proto__.methodName 
(3단계) instance.__proto__.__proto__.methodName
  ... 

var arr = [1, 2];
arr.__proto__ == Array.prototype; // true // arr은 배열.
Array.prototype.__proto__ == Object.prototype; // true // Array.prototype는 객체.

arr.toString() // "1,2"     // 객체메서드 toString 사용
Array.prototype.toString.call(arr); // "1,2"
Object.prototype.toString.call(arr); // "[object Array]"

arr.toString = function(){
    return "OVERRIDE";
}
arr.toString() // "OVERRIDE"  
// Array.prototype.toString까지 도달하지 못하고 arr.toString가 실행됨.

----------------------------------------------------------
Array 외에도 Number, String, Boolean 등 JS의 모든 데이터타입들은
이처럼 prototype.__proto__을 통해 Object.prototype에 접근 가능.
ex) Array.prototype.__proto__ == Object.prototype; // true 



















----------------------------------------------------------
----------------------------------------------------------
(참고) 
  Array.prototype는 Object.prototype과 연결되어있지만,
  Array 자체도 Function에 연결되어있음.
  Function.prototype은 Object.prototype과 연결되어있고,
  Function은 다시 Function에 연결되어있음 => 무한하게 연결되어있음
   - 실제로 무한대의 구조가 메모리를 차지하고 있지는 않음.
   - 하지만 instance.constructor.constructor...처럼 끝없이 접근은 가능.
   - 전혀 실용적이지 않음. 인스턴스와 직접적으로 연결된 요소들만 신경쓰면 됨. 
----------------------------------------------------------
(참고)
<객체의 내부 구조>
console.dir({a:1});
/*
Object
  a: 1
  __proto__:
    constructor: ƒ Object()              // 생성자 함수 Object 
    hasOwnProperty: ƒ hasOwnProperty()
    isPrototypeOf: ƒ isPrototypeOf()
    propertyIsEnumerable: ƒ propertyIsEnumerable()
    toLocaleString: ƒ toLocaleString()
    toString: ƒ toString()
    valueOf: ƒ valueOf()
    __defineGetter__: ƒ __defineGetter__()
    __defineSetter__: ƒ __defineSetter__()
    __lookupGetter__: ƒ __lookupGetter__()
    __lookupSetter__: ƒ __lookupSetter__()
    get __proto__: ƒ __proto__()
    set __proto__: ƒ __proto__()
*/

<배열의 내부 구조> 
배열의 __proto__ 내부에는 __proto__가 존재: 객체 내부의 __proto__와 동일한 내용
모든 객체의 __proto__에는 Object.prototype이 연결되어있음.
=> ex) Array.prototype도 객체이므로 객체의 내부 구조(__proto__)가 그대로 존재.
=> ex) 배열.toString처럼 배열에서 Object.prototype의 메서드 사용 가능.
 
console.dir([0, 1]); // console.log(Array);에서도 확인 가능
/*
Array(2)
  0: 0
  1: 1
  length: 2
  __proto__: Array(0)
    // 각종 배열 메서드들 생략
    values: ƒ values()
    Symbol(Symbol.iterator): ƒ values()
    Symbol(Symbol.unscopables): {copyWithin: true, entries: true, fill: true, find: true, findIndex: true, …}

    __proto__:                          // 객체의 __proto__와 동일
      constructor: ƒ Object()
      hasOwnProperty: ƒ hasOwnProperty()
      isPrototypeOf: ƒ isPrototypeOf()
      propertyIsEnumerable: ƒ propertyIsEnumerable()
      toLocaleString: ƒ toLocaleString()
      toString: ƒ toString()
      valueOf: ƒ valueOf()
      __defineGetter__: ƒ __defineGetter__()
      __defineSetter__: ƒ __defineSetter__()
      __lookupGetter__: ƒ __lookupGetter__()
      __lookupSetter__: ƒ __lookupSetter__()
      get __proto__: ƒ __proto__()
      set __proto__: ƒ __proto__()
*/
