1) 운영체제별 경로구분자
- Window: '\'             ex) C:\Users\bugod, 
- POSIX(맥,리눅스): '/'   ex) /home/bugod

-------------------------------------
2) 운영체제별 환경변수의 구분자
- Window: 세미콜론(;)
- POSIX: 콜론(:)
- process.env.PATH에서 확인 가능

-------------------------------------
3) root 폴더
- Window: C:\ 
- POSIX: /

-------------------------------------
4-1) 절대경로
- root 폴더(C:\ or /) 혹은 Node.js 프로세스가 실행되는 위치를 기준으로 표현한 경로.
- path.resolve : C:\ 혹은 /을 만나면 앞의 경로 무시. 절대경로

4-2) 상대경로
- 현재 파일을 기준으로 표현한 경로. 
- .(현재 파일과 같은 경로) & ..(한 단계 상위 경로)를 활용하여 표현.
- path.join : C:\ 혹은 /을 만나면 상대경로로 처리

path.join("/a", "/b", "c");    // '/a/b/c'
path.resolve("/a", "/b", "c"); // '/b/c'

path.join('..', "/b", '.', "c");    // '../b/c'
path.resolve('..', "/b", '.', "c"); // '/b/c'

-------------------
4-3) Node.js는 require.main을 기준으로 상대 경로를 인식
- require.main과 다른 디렉터리의 파일이 상대 경로를 갖게 된다면 버그 발생.
  => path 모듈을 통해 해결 가능

-------------------------------------
5) 다른 운영체제의 경로 스타일 사용방법

윈도우에서 POSIX 스타일 경로를 사용하는 경우,
path.posix.sep, path.posix.join()과 같이 사용

POSIX에서 윈도우 스타일 경로를 사용하는 경우,
path.win32.sep, path.win32.join()과 같이 사용

-------------------------------------
cf) 윈도우의 경우 상황에 따라 \\와 \를 사용.
- 기본적으로 \ 하나를 사용하여 경로를 표시
- JS string에서 \가 특수문자이기 때문에 \\로 경로를 표현하게 되는 것
  ex) \n은 줄바꿈. C:\node는 에러 발생. C:\\node라고 표시해줘야 함.
- path 모듈은 이러한 문제들을 자체적으로 해결해줌. 윈도우에서 특히 path가 필수적임.

